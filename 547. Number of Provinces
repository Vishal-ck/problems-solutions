class Solution {
    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>> adjList= new ArrayList<ArrayList<Integer>>();
       for (int i=0;i<isConnected.length;i++)
       {
           adjList.add(new ArrayList<Integer>());
       }
       int [] vis=new int[isConnected.length];
    
        for(int i=0;i<isConnected[0].length;i++)
        {
            for(int j=0;j<isConnected.length;j++)
            {
                if (isConnected[i][j]==1 && i!=j)
                {
                    adjList.get(i).add(j);
                     adjList.get(j).add(i);
                }
            }
        }
        int c=0;
        for (int i=0;i<vis.length;i++)
        {
            if (vis[i]==0){
                dfs(vis,i,adjList);
                c++;
            }
        }
         // Print the adjacency list
        // for (int v = 0; v < adjList.size(); v++) {
        //     System.out.print(v);
        //     for (Integer u : adjList.get(v)) {
        //         System.out.print(" -> " + u);
        //     }
        //     System.out.println();
        //}
     return c;   
    }
    public static void dfs(int[] vis,int node,ArrayList<ArrayList<Integer>> adjList)
    {
        vis[node]=1;
        for (int a :adjList.get(node))
        {
            if (vis[a]==0)
            {
                dfs(vis,a,adjList);
            }
        }
    }
}
